Chapter 1: Introduction
------------------------
Downloading and Installing.
    Backwards compatibility, python version compatiblity, common issues etc.
What is Django?
    Brief History
    What django aims to be, what it is not (not a cms or ready to use website)
    Batteries included
    Future (django-nonrel, django with python3.0)
Django Features:
    Structure
    Reusable Code
    Security
    Documentation
    Community
Why Django? Why Django instead of any other framework?
    Compare django to other lightweight frameworks like codeigniter, rails.
Inside Django
    Python Philosophy
    Django Philosophy
    Request-Response cycle 
    Django Architecture
    Django ORM
    DRY principle
    Loose coupling
    Introduction to middleware, template tags, context processors, RequestContext

Chapter 2. Building a personal CD library.
--------------------------------------------

.. include:: chapter2.rst

..
    (In this chapter we introduce Django ORM and Admin. We have not yet introduced Templates so we do not write any custom views.)
    Diving in. [Code listing]

    Introduction to Django ORM.
    Declaring your entities. (How to define the models.)
    Talking to the database. (Filter, get, exclude)
    
    Introduction to Django Admin.
    Using Django's autogenerated Admin.
    Extending the Admin.

Chapter 3. Building a Pastebin.
--------------------------------
(Topics introduced: URL configuration, Templates, Generic views, Standalone Django scripts)

.. include:: chapter3.rst

Diving in. [Code listing]

URL Configuration. [Of course the previous chapter had, but that would just have one entry, to Admin's urlconf. In this chapter we explain writing URLConfs.]
 How URLConfs map views to Urls.
 Passing variables to views.

Using Templates
 Templates are not programming language.
 In build templates tags and filters.
 Template inheritance

Using generic views.
 Why generic views.
 Build the same views without generic views and show the difference.
 Detailed explanation of Generic views used in this chapter - django.views.generic.create_update.create_object and django.views.generic.list_detail

Standalone Django Scripts
(We would like to delete old code pastes, so we create a standalone script)

Chapter 4. Building a Blog
----------------------------
(Topics introduced: Authentication, Session management, NewForms, Generating simple RSS feeds. Date based generic views.)
 
Diving in. [Code listing]
 
Authentication. [In chapter 2, all views were managed by Admin, so we did not need to handle authentication. In chapter 3, all views would be public, so no authentication was needed. In this chapter we need to restrict access to only logged in user, so we introduce it here.]
  Using django.contrib.auth
  Using login_required decorator to restrict access to logged in users.
  Using request.user in views, for finer control over views.
  Using context processors to use logged in users in templates.

Session Management. [So once user has commented, their name/email information is stored.]  
  The machinery behind sessions framework.
  Using cookies.
  Using session to abstract handling cookies.
  
Newforms. [Comment, Post, Settings form]
  Using newforms.
  Using model form to auto generate forms for model.
  Creating complex forms programatically. (Instead of defining them.)
  
Generating RSS feeds.
  Using django.contrib.syndication to generate feeds for the Blog.
  
Using date based generic views to generate monthly and weekly archives for the blog.

Chapter 5. Building a Wiki
-----------------------------
(Topics introduced: Managing user registration using django-regsitration. Advanced ORM tricks. Overriding save for Entities. Signals. Websearches using Yahoo Devloper API.)

Diving in. [Code listing]

Managing user registration using django-regsitration.
  In the previous chapters we did not allow external users to create a user. Here a user can create an account on the wiki. This is managed using django-registration.
  Explanation of Django registration, its views and templates.
  Discussion of making reusable Django applications, taking Django-registration as example.
  
Advanced ORM
  model.extra, How to use it to handle complex queries.
  Defining customer manager for models. (With a wiki, we reattach model.objects to a manager which only gets the latest object. Another custom manager, model.allobjects gets us all the elements.)
  Manager methods vs. classmethods.
  Overiding save, delete amd other model objects to enable versioning for objects.
  Introduce signals. (However we would not have used this in our code.)
  Show how signals could have been used for the same purpose, and compare.
  
Websearches using Yahoo Developer API.  
  We want to make the wiki searchable, so instead of going via a local search system like Lucene, we use Yahoo Developer API. In this we can explain to use django.util.simplejson, to talk to external APIs which provide a JSON interface. 
  
Chapter 6. Building a Yahoo Answer's like site
--------------------------------------------------
(Topics introduced: Transactions, Middleware, Permissions, Messages.)

Diving in. [Code listing]  
  
Transactions. (Till previous chapters we were not using transactions and all database actions were in Autocommit mode. Here we want many views to work as part of a transaction.)
  Using TransactionMiddleware  to tie Http requests to transactions.
  Finer grained control over transaction using commit_manually
  
Permissions. (We would define various user levels, and different user levels have different permissions)
  Introducing permissions.
  Creating cutsom permissions.
  How Groups, Users and permissions work together.
  Using permission_required decorator.
  
Message. (For example when the user gets a reply to her question.)
  Using get_and_delete_messages()
  
  

Chapter 7. Building a Project management application
-------------------------------------------------------
(Topics introduced: File uploads, Integrating with Amazon S3, Complex RSS feeds-builds on chapter 4, Generating graphics using PIL. Sending Email with Django. Generating PDFs for pages. Exporting Data.)

(This and the next chapter would have larger amount of code than the previous chapters. These chapters would be a rehash of previous chapters, and would show how all these concepts work together.)

Diving in. [Code listing]

File uploads. (We allows users to upload files in this app.)
  Using the Django file widget to upload files.
  The problem with large files.
  Using S3, as a file store.
  Restricting access to S3 files, using Django authentication.
  
Advanced RSS feeds.
  Generating RSS feeds per project.
  Password protecting RSS feeds.
  
Using PIL. (We generate charts for the project, so we use PIL)
  Using PIL to generate charts for the project.
  
Sending email.
  The logs for the project are sent to the user via mail. 
  
Genrating PDFs.
  The reports for the project are available as PDF. This is done using HTML2PDF library. 

Exporting PDF.
  The data for a project is accessible in CSV format. Here we show exporting of a data on a per project, or a more granular level.
  

Chapter 8. Building a Social news Site
------------------------------------------
(Topics introduced: This chapter uses techniques learnt in previous chapters, and introduce Caching and Testing.)

Diving in. [Code listing]

Introduce caching.
  The various caching backends.
  Page level caching. 
  More granular caching.
  
Introduce testing for Django.
  Testing Django models using doctests, and unittests.
  Testing Django views.

Walking though the code.
In this chapter, we walk through the code, to see how all these fit together. 

Performance tuning the code.
  Logging the queries used, through a middleware.
  When select related makes sense.
  Profiling Django applications.
  

Appendices.
-------------------
Using Django with Appengine
------------------------------
  How Appengine differs from Django.
  Introduction to Appengine ORM.
  Rewriting sessions to use Appengine ORM.
  How other constructs be ported to Appengine ORM.
  Using Appengine User class instead of Django User.
  Getting back login_required decorator, and why you might not need it.

Django for the PHP programmer
--------------------------------
  How PHP differs from Django.
  Django templates are not programming language.
  Mapping PHP constructs to Django.

Django for the JSP/Sevelet programmer.
---------------------------------------
  How JSP differs from Django.
  How Servelets differ from Django.
  How do doGet, and other do* map to Django.
  Mapping JSP/Servelt constructs to Django.

Hacking Django internals.
-------------------------------------
[Here we would some of what goes on behind the scenes.]
Templates. 
How they work.
Swapping out Django template to use another templating engine.
  
ORM.
  How does Django use metaclasses to generate a class from Model class declared by you.

[This would be a high level overview where we would like a topic to be introduced. However, we will introduce things as they become used in code. For example we introduce templates and in built tags in chapter 3, however we would not give description of each template tag at that place. As we use a new template tag, we would give a description of that.]

